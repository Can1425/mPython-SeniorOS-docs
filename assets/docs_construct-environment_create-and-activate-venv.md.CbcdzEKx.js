import{_ as a,c as t,o as s,U as e,a1 as i}from"./chunks/framework.DqMUgYTQ.js";const m=JSON.parse('{"title":"创建并激活虚拟环境","description":"","frontmatter":{"title":"创建并激活虚拟环境"},"headers":[],"relativePath":"docs/construct-environment/create-and-activate-venv.md","filePath":"docs/construct-environment/create-and-activate-venv.md","lastUpdated":1712302165000}'),n={name:"docs/construct-environment/create-and-activate-venv.md"},p=e('<h1 id="编译环境" tabindex="-1">编译环境 <a class="header-anchor" href="#编译环境" aria-label="Permalink to &quot;编译环境&quot;">​</a></h1><br><h1 id="创建并激活虚拟环境" tabindex="-1">创建并激活虚拟环境 <a class="header-anchor" href="#创建并激活虚拟环境" aria-label="Permalink to &quot;创建并激活虚拟环境&quot;">​</a></h1><h2 id="为什么需要-python-虚拟环境" tabindex="-1">为什么需要 Python 虚拟环境 <a class="header-anchor" href="#为什么需要-python-虚拟环境" aria-label="Permalink to &quot;为什么需要 Python 虚拟环境&quot;">​</a></h2><p>Python 应用经常需要使用一些包第三方包或者模块，有时需要依赖特定的包或者库的版本，所以不能有一个能适应所有 Python 应用的软件环境，很多时候不同的 Python 应用所依赖的版本是冲突的，满足了其中一个，另一个则无法运行，解决这一问题的方法是 虚拟环境。虚拟环境是一个包含了特定 Python 解析器以及一些软件包的自包含目录，不同的应用程序可以使用不同的虚拟环境，从而解决了依赖冲突问题，而且虚拟环境中只需要安装应用相关的包或者模块，可以给部署提供便利</p><h2 id="创建虚拟环境" tabindex="-1">创建虚拟环境 <a class="header-anchor" href="#创建虚拟环境" aria-label="Permalink to &quot;创建虚拟环境&quot;">​</a></h2><p>进入之前克隆源代码的本地目录，在该目录单击右键</p><p><img src="'+i+'" alt="右键菜单"></p><p>选择 在终端中打开(T)</p><p>在弹出窗口中输入</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>使用该命令请确保你的 Python 版本大于等于 3.3</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Python 3.3 之后，可以用模块 venv 代替 virtualenv 工具，好处是不用单独安装，3.3 及之后的版本，都可以通过安装好的 Python 来创建虚拟环境:</p><p>python -m venv myvenv</p><p>意为 在当前目录创建一个名为 myvenv 的虚拟环境</p><p>venv 相关参数</p><p>--without-pip: 不需要安装 pip，默认为安装</p><p>--clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建</p><p>因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python 解释器版本</p></div><h2 id="激活虚拟环境" tabindex="-1">激活虚拟环境 <a class="header-anchor" href="#激活虚拟环境" aria-label="Permalink to &quot;激活虚拟环境&quot;">​</a></h2><p>恭喜你，如果不出意外的话，请激活你刚才创建的虚拟环境</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请注意，以下教程以 PowerShell 为例</p></div><p>输入命令</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path\\.venv\\Scripts\\Activate.ps1</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请将 path 替换为之前克隆源代码的本地目录的路径</p></div><p>此时，终端应出现虚拟环境标识：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) PS path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div>',21),o=[p];function h(l,c,r,d,v,k){return s(),t("div",null,o)}const y=a(n,[["render",h]]);export{m as __pageData,y as default};
